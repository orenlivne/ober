#!/bin/bash
#----------------------------------------------------------------
# Split a file into equal roughly chunks without breaking lines.
#
# @ see http://stackoverflow.com/questions/7764755/unix-how-do-a-split-a-file-into-equal-parts-withour-breaking-the-lines
#
# Author: Oren E. Livne
# Date:   15-FEB-2013
#----------------------------------------------------------------

#=======================================
# Read input parameters
#=======================================
DARGS=65
PROGNAME=`basename $0`

function read_input_args
{
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Default argument values
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # #Digits in node directory names
    part_prefix_size="3"
    
    # Read input arguments
    while getopts "ha:" optionName; do
	case "$optionName" in
	    a) part_prefix_size="$OPTARG";;
	    h) print_usage; exit 0;;
	    [?]) print_type_for_help;;
	esac
    done
    
    # Get mandatory arguments
    shift $(( $OPTIND -1 ))
    if [[ $# -ne 3 ]]; then
  	echo "3 mandatory args expected."
	print_type_for_help
    fi
    file="$1"
    part_prefix="$2"
    parts="$3"
}

function print_usage
{
    echo -e "Usage: ${PROGNAME} <file> <part-prefix> <parts>"
    echo -e ""
    echo -e "Split a file into roughly equal parts without breaking lines."
    echo -e "Generate numeric suffixes."
    echo -e ""
    echo -e "Optional flags:"
    echo -e "\t-a part-prefix-size\tSuffix length to use in part file names. Default: ${part-prefix-size}"
}

# Print help message and die
function print_type_for_help
{
    echo "Type \"${PROGNAME} -h\" for help."
    exit $E_BADARGS
}

#=======================================
# Main Program
#=======================================
# Parse CLI arguments
read_input_args "$@"

# Split the actual file, maintaining lines.
total_lines=`wc -l ${file} | awk '{print $1}'`
((lines_per_file = (total_lines + parts - 1) / parts))
split -a ${part_prefix_size} -d --lines=${lines_per_file} ${file} ${part_prefix}
