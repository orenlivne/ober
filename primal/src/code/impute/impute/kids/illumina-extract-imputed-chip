#!/bin/bash
#----------------------------------------------------------------
# Fetch RS#, chr# and base pair position from the manifest CSVs
# of all Illumina chips of interest.
# 
# Author: Oren E. Livne
# Date:   16-JUL-2013
#----------------------------------------------------------------

#=======================================
# Read input arguments
#=======================================
DARGS=65
PROGNAME=`basename $0`

if [[ ( $# -lt 5 ) || ( $# -gt 5 ) ]]; then
  echo "Usage: ${PROGNAME} <work-dir> <chip-name> <start-chr> <end-chr> <num-parallel-jobs>"
  echo ""
  echo "Fetch RS#, chr# and base pair position from the manifest CSVs"
  echo "of the Illumina CytoSNP or OmniExpress chip, assumged to be downloaded"
  echo "from the Illumina Website to the current directory. Extract imputed genotypes."
  echo "Convert to a PLINK data set that can be input to the phasing pipeline."
  exit $E_BADARGS
fi

work_dir="$1"
chip="$2" # cytosnp|omniexpress
start_chr="$3"
end_chr="$4"
num_jobs="$5" # #jobs to run in parallel

#=======================================
# Business Logic
#=======================================

# Convert a single chromosome to PLINK TPED
function do_chrom
{
    # Input parameters
    work_dir="$1"
    chip="$2"
    chrom="$3"

    # Constants
    CGI_HOME="${OBER_OUT}/impute_cgi/imputed-override" # Directory of imputed files

    out="${work_dir}/${chip}"
    file="${chip}.imputed.chr${chrom}"
    imputed_file="imputed_cgi.chr${chrom}.tsv"
    echo "-- Chromosome ${chrom}"

    # Intersect each of the chip SNP chromosome files with CGI snps
    if [ ! -f ${CGI_HOME}/${imputed_file}.sorted ]; then
        zcat ${CGI_HOME}/${imputed_file}.gz | sort -k 4,4 > ${CGI_HOME}/${imputed_file}.sorted
    fi
    if [ ! -f ${out}/${file}.tsv ]; then
      echo "  Intersect with CGI SNPs"
      join -1 4 -2 3 ${CGI_HOME}/${imputed_file}.sorted <(awk -v c=${chrom} '$2 == c' ${out}/${chip}.nof) > ${out}/${file}.tsv
    fi

    # Convert to PLINK TPED. Filter variants to SNPs with RS numbers.
    # Remove duplicates. Remove markers with no data.
    # Don't remove partial genotypes since we're not using plink to process ordered haplotype data.
    if [ ! -f ${out}/${file}.tped ]; then
        echo "  Convert to PLINK TPED ${out}/${file}.tped"
	awk '{ if (x[$(NF-1)]++ == 1) { printf "%s\n", $(NF-1); }}' ${out}/${file}.tsv > ${out}/${file}.dups
	printf "  %d duplicates found\n" `wc -l ${out}/${file}.dups | awk '{print $1}'`
    	awk -v chrom=${chrom} \
        '{
          if (NR == FNR) { duplicates[$0]; } \
          else if (($5 == "snp") && (!($(NF-1) in duplicates))) { \
            m = match($8, "dbsnp..*:(.*)(;dbsnp.(.*):(.*))*", g); \
	    if (m) { \
              data = 0; \
              for (i = 9; i <= NF-2; i++) { \
                if (substr($i,2,2) != "NN") { \
                  data = 1; \
                  break; \
                } \
              } \
              if (data) {
                printf "%s %s 0 %s", chrom, g[1], $4; \
       	        a["0"]=$6; a["1"]=$7; a["N"]="0"; \
       	        for (i = 9; i <= NF-2; i++) { \
       	          g1 = a[substr($i,2,1)]; \
                  g2 = a[substr($i,3,1)]; \
       	          printf " %s %s", g1, g2; \
     	        } \
       	        printf "\n"; \
              } \
            } \
          } \
   	}' ${out}/${file}.dups ${out}/${file}.tsv > ${out}/${file}.tped
	printf "  %d SNPs extracted" `wc -l ${out}/${file}.tped | awk '{print $1}'`
    fi
}

# Merge all chromosomes
function merge_chroms
{
    # Input parameters
    work_dir="$1"
    chip="$2"

    # Constants
    FAM_PATH="${OBER}/testdata/pedigree/hutterites.genotyped.tfam"
    PLINK="plink --noweb --nonfounders"
    SRC="${OBER_CODE}/impute/impute/kids"
    CACHE_DIR="${OBER}/data/common/db/cache"

    out="${work_dir}/${chip}"
    file="${chip}.imputed"

    echo "-- Merging chromosomes"
    cd ${out}
    if [ ! -f ${file}.tped ]; then
      echo "  Merging TPEDs"
      cat ${file}.chr*.tped > ${file}.tped
    fi

    # Calculate LD between SNPs and save pairs that are in r^2 > 0.3 to database (for frame pruning)
    if [[ ! -f ${out}/ld/ld.txt ]]; then
        # Convert PLINK TPED -> PLINK BED. For that purpose we need to remove partial genotypes, which
	# are not supported by PLINK.
        echo "  Convert to PLINK BED"
	mkdir -p ld
    	awk \
        '{
           printf "%s %s %s %s", $1, $2, $3, $4; \
           for (i = 5; i <= NF; i+=2) { \
   	     g1 = $i; \
             g2 = $(i+1); \
             if ((g1 == "0") || (g2 == "0")) { g1="0"; g2="0";}
       	     printf " %s %s", g1, g2; \
     	   } \
   	   printf "\n"; \
          }' ${file}.tped > ${file}.full.tped
	cd ld
	echo "  Extract 60 unrelated samples"
	${PLINK} --tped ${out}/${file}.full.tped --tfam ${FAM_PATH} --out unrelated60 --keep ${SRC}/unrelated60.ids --make-bed
	# Zero out unrelated's parent ID columns so that they are treated as founders by plato in LD calculation
	awk '{print $1, $2, 0, 0, $5, $6}' unrelated60.fam > tmp && mv tmp unrelated60.fam
	echo "  Calculate LD"
	plato ${SRC}/plato.cmd -bin-input unrelated60 -out out
	awk '{if (($5 > 0) && ($5 <= 1)) printf "%s\t%s\t%s\t%s\n", $3, $2, $4, $5;}' out.ld_calc_ldcalconly_ldwindow_50_ldwindowkb_1000.txt > ld.txt
    fi
}

#=======================================
# Main Program
#=======================================
out="${work_dir}/${chip}"
cd ${work_dir}
echo "Chip ${chip}"
mkdir -p ${chip}

# Download file if not found yet
if [ ${chip} == "cytosnp" ]; then
    url="http://supportres.illumina.com/documents/downloads/productfiles/cytosnp12-ffpe/humancytosnp-12v2.1-ffpe_g.csv"
elif [ ${chip} == "omniexpress" ]; then
    url="http://supportres.illumina.com/documents/myillumina/2dec04bb-495d-4f81-a7f3-e5646937bab8/humanomniexpress-12v1_j_ffpe.csv"
else
    echo "Unrecognized chip ${chip}"
    exit -1
fi
if [ ! -f ${out}/${chip}.csv ]; then
    echo "-- Downloading ${chip} data from ${url} ..."
    wget -O ${out}/${chip}.csv ${url} -o download.${chip}.log
    rm -f download.${chip}.log
fi

# Extract SNP list from Illumina manifest file
if [ ! -f ${out}/${chip}.nof ]; then
   echo "Creating SNP list"
   count=`wc -l ${out}/${chip}.csv | awk '{print $1}'`
   head -$(( count - 29 )) ${out}/${chip}.csv | tail -$(( count - 37)) | awk -F, '{print $2, $10, $11}' | awk '($2 >= 1) && ($2 <= 22)' | sort -k 2,2n -k 3,3n > ${out}/${chip}.nof
fi

export -f do_chrom
if [ "${start_chr}" == "${end_chr}" ]; then
    echo "Serial run"
   # Single chromosome, serial run
   do_chrom ${work_dir} ${chip} ${start_chr}
else
   # Process chromosomes in parallel
   seq ${start_chr} ${end_chr} | parallel -j ${num_jobs} do_chrom ${work_dir} ${chip}
fi

# Merge results into a single PLINK data set
merge_chroms ${work_dir} ${chip}
