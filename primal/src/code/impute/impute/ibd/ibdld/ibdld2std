#!/bin/bash
#--------------------------------------------------------------------
# Convert an IBDLD segment file into a standard format that can be
# compared with our segments.
# 
# Author: Oren E. Livne
# Date:   12-FEB-2013
#--------------------------------------------------------------------

# Read input arguments
DARGS=65
PROGNAME=`basename $0`
if [ $# -ne 1 ]; then
  echo "Usage: ${PROGNAME} <file>"
  echo ""
  echo "Convert an IBDLD segment file into a standard format that can be compared"
  echo "with our segments."
  exit ${E_BADARGS}
fi
file="$1"
if [ ! -f $file ]; then
    echo "File $file not found"
    exit 1
fi
	
# Setup temp files
segment_file="/tmp/$PROGNAME.$$.tmp.segment"
id_file="/tmp/$PROGNAME.$$.tmp.id"
#trap "rm $segment_file $id_file; exit" SIGHUP SIGINT SIGTERM
code="$OBER/code/impute/impute/ibd/ibdld"

# Extract relevant columns; sort by ids
cat $file | awk {' 
	if ($2 <= $4) { printf "%d %d", $2, $4} else { printf "%d %d", $4, $2};
	for (i = 6; i <= NF; i+=6) printf " %d %d", $i, $(i+1); printf "\n";
	'} | sort -k1n,1 -k2n,2 > $segment_file

# Create a file with the set of IDs, sorted
cat $file | awk {'printf "%d\n%d\n", $2, $4;'} | sort -n -u > $id_file

# Add missing pairs
add_missing_pairs=`to-unix-path $code/add_missing_pairs.py`
cat $segment_file | python $add_missing_pairs `to-unix-path $id_file`

# Clean up
#rm -f $segment_file $id_file
