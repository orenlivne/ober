#!/bin/bash
#------------------------------------------------------------------------
# A reduce job on the Quality Control (QC) statistics stored in
# a list of files generated by qc-impute2. Accepts stdin input, so these
# files are to be concatenated.
# 
# Author: Oren E. Livne
# Date:   07-FEB-2014
#------------------------------------------------------------------------

#=======================================
# Constants
#=======================================

#=======================================
# Read input parameters
#=======================================
DARGS=65
PROGNAME=`basename $0`

function read_input_args
{
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Default argument values
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Threshold for IMPUTE2 probabilities to be considered as called genotypes
    bins="100"
    # Read input arguments
    while getopts "hb:" optionName; do
	case "$optionName" in
	    b) bins="$OPTARG";;
	    h) print_usage; exit 0;;
	    [?]) print_type_for_help;;
       esac
    done

    # Get mandatory arguments
    shift $(( $OPTIND -1 ))
    if [[ $# -ne 0 ]]; then
  	echo "No arguments should be be specified."
	print_type_for_help
    fi
}

function print_usage
{
    echo -e "Usage: ${PROGNAME}"
    echo -e ""
    echo -e "Reduce IMPUTE2 QC statistics (merge concatenated files generated by qc-impute2)."
    echo -e ""
    echo -e "Optional flags:"
    echo -e "\t-b bins\t\tNumber of bins to discretize IMPUTE2 genotype calling probabilities into. Default: ${bins}"
}

# Print help message and die
function print_type_for_help
{
    echo "Type \"${PROGNAME} -h\" for help."
    exit ${E_BADARGS}
}

#=======================================
# Business Logic
#=======================================

#=======================================
# Main Program
#=======================================
# Parse CLI arguments
read_input_args "$@"

awk -v bins=${bins} 'BEGIN { r = bins+1; for (k = 0; k <= bins; k++) { called[k] = 0; discordant[k] = 0; } } \
    { k = (NR % r); called[k] += $1; discordant[k] += $2; } \
    END { for (k = 0; k <= bins; k++) printf "%d %d\n", called[k], discordant[k]; }'
