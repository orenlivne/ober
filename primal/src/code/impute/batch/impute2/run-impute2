#!/bin/bash
#------------------------------------------------------------------------
# Run IMPUTE2 on a window (chunk of data of a chromosome).
# 
# Author: Oren E. Livne
# Date:   13-SEP-2013
#------------------------------------------------------------------------

#=======================================
# Constants
#=======================================

#=======================================
# Read input parameters
#=======================================
DARGS=65
PROGNAME=`basename $0`
# Name of impute2 executable
IMPUTE2_EXEC="impute2"

function read_input_args
{
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Default argument values
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Threshold for IMPUTE2 probabilities to be considered as called genotypes
    threshold="0.99"
    # Input phased or unphased data into IMPUTE2?
    phased=false

    # Read input arguments
    while getopts "ht:p" optionName; do
	case "$optionName" in
	    t) threshold="$OPTARG";;
	    p) phased=true;;
	    h) print_usage; exit 0;;
	    [?]) print_type_for_help;;
       esac
    done

    # Get mandatory arguments
    shift $(( $OPTIND -1 ))
    if [[ $# -ne 1 ]]; then
  	echo "Data set prefix must be specified."
	print_type_for_help
    fi

    # Chromosome's output directory
    n="$1" #${OBER_OUT}/impute_cgi/impute2/chr${chrom}"
    # Node number
    #node="$2"
    # Part number
    #part="$3"

    if ${phased}; then
	suffix="haps"
    else
	suffix="gen"
    fi
}

function print_usage
{
    echo -e "Usage: ${PROGNAME} <data-set-prefix>"
    echo -e ""
    echo -e "Run IMPUTE2 on chunk #part in node #node of chromosome chrom."
    echo -e ""
    echo -e "Optional flags:"
    echo -e "\t-t threshold\t\tIMPUTE2 genotype calling threshold 0..1. Default: ${threshold}"
    echo -e "\t-p\t\tInput phased or unphased data into IMPUTE2? Default: ${phased}"
}

# Print help message and die
function print_type_for_help
{
    echo "Type \"${PROGNAME} -h\" for help."
    exit ${E_BADARGS}
}

#=======================================
# Business Logic
#=======================================

#=======================================
# Main Program
#=======================================
# Parse CLI arguments
read_input_args "$@"

# Common file prefix to this chunk
#n="${out_home}/node-`printf \"%04d\" ${node}`/run_impute2-`printf \"%04d\" ${part}`"
# Output file name prefix
out="$n.impute2.${suffix}"

# Run impute2 if output files don't exist
if [ ! -f ${out}_info ]; then
    # Flags common to all IMPUTE2 runs
    start_bp=`head -1 $n.study.${suffix} | awk '{print $3}'`
    stop_bp=`tail -1 $n.study.${suffix} | awk '{print $3}'`
    flags="-m $n.map -Ne 20000 -int ${start_bp} ${stop_bp} -o ${out} -allow_large_regions"
    if ${phased}; then
	# Phased data run
	flags="${flags} \
	    -l $n.legend \
	    -h $n.ref.${suffix} \
            -known_haps_g $n.study.${suffix} \
	    -phase"
    else 
	# Unphased data run
	flags="${flags} \
	    -g_ref $n.ref.${suffix} \
            -g $n.study.${suffix} "
    fi
    # Run impute2 command
    ${IMPUTE2_EXEC} ${flags}
fi

# If the reference panel region is strictly larger than than the study panel region,
# remove the first and/or last variants from impute2's output files so that they match our imputed file
#tmp=`mktemp`
tmp=${out}.truncated
tmp_info=${out}_info.truncated
cp ${out} ${tmp}
cp ${out}_info ${tmp_info}

# Remove first line from IMPUTE2 files if needed
start_legend=`sed '1d' $n.legend | head -1 | awk '{print $2}'`
start_imputed=`head -1 ${out} | awk '{print $3}'`
if [[ ${start_imputed} -lt ${start_legend} ]]; then
    for f in ${tmp} ${tmp_info}; do
	sed '1d' ${f} > ${f}.tmp && mv ${f}.tmp ${f}
    done
fi

# Remove last line from IMPUTE2 files if needed
stop_legend=`tail -1 $n.legend | awk '{print $2}'`
stop_imputed=`tail -1 ${out} | awk '{print $3}'`
if [[ ${stop_imputed} -gt ${stop_legend} ]]; then
    for f in ${tmp} ${tmp_info}; do
	head -$(( `wc -l ${f} | awk '{print $1}'` - 1 )) ${f} > ${f}.tmp && mv ${f}.tmp ${f}
    done
fi

# Threshold IMPUTE2 genotypes to have maximum probability >= t.
# Convert to dosages for easier comparison with our pedigree-based imputation.
if [ ! -f ${out}.dose.old ]; then
    awk -v t=${threshold} '{ \
  for (i = 1; i <= 5; i++) printf "%s ", $i; \
  for (i = 6; i <= NF; i+= 3) { \
    m=-1; \
    for (j = 0; j < 3; j++) { if (m < $(i+j)) { m =$(i+j); dose=j; } } \
    if (m >= t) printf "%d ", dose; else printf "? "; \
  } printf "\n"; }' ${tmp} > ${out}.dose.old

  # Calculate statistics:
  # - SNP metadata
  # - Their r^2 measure (called info)
  # - Concordance between our imputed results vs. ours (when both are called)
  # - Concordance between our imputed results vs. ours for on genotypes called het in our imputation
  #   (when both are called; useful for rare variants)
  #
  # Implementation note 1: convert our data to dosages for easier comparison.
  # Implementation note 2: since the #discordances is expected to be small, we count discordances and then
  # take 1-(.) to calculate concordance. Faster, since counters are incremented less frequently.
    paste \
	${out}.dose.old \
	<(cat $n.imputed.${suffix} | awk '{ for (i = 1; i <= NF; i+= 2) { if (($i == "?") || ($(i+1) == "?")) printf "? "; else printf "%d ", $i+$(i+1); } printf "\n"; }') | \
	awk '{ \
    for (i = 1; i <= 5; i++) printf "%s ", $i; \
    all = (NF-5)/2; \
    called = 0; \
    discordant = 0; \
    called_het = 0; \
    discordant_het = 0; \
    called_impute2 = 0; \
    called_pedigree = 0; \
    for (i = 6; i < 6+all; i++) \
    { \
      dose_impute2 = $i;
      dose_pedigree = $(i+all);
      if ((dose_impute2 != "?") && (dose_pedigree == "?")) called_impute2++;
      if (dose_pedigree != "?") called_pedigree++;
      if ((dose_impute2 != "?") && (dose_pedigree != "?")) \
      { \
         called++; \
         if (dose_impute2 != dose_pedigree) discordant++; \
         \
         if ((dose_impute2 == 1) || (dose_pedigree == 1)) \
         { \
           called_het++; \
           if (dose_impute2 != dose_pedigree) discordant_het++;
         } \
      } \
    } \
    printf "%d %f %f %d %d %f %f %f\n", \
      discordant, (1.*called)/(all+1e-15), 1-(1.*discordant)/(called+1e-15), \
      discordant_het, called_het, 1-(1.*discordant_het)/(called_het+1e-15), \
      (1.*called_impute2)/(all+1e-15), (1.*called_pedigree)/(all+1e-15);}' > $n.concordance.${suffix}

    # Output SNP statistics + MAF
    paste \
	$n.concordance.${suffix} \
	<(sed '1d' ${tmp_info} | awk '{print $5}') \
	<(awk '{print $6, $8}' $n.frq.${suffix}) \
	> $n.stats.${suffix}
fi

# Add SNP quality to dosage file. Using a criterion that balances concordance with our imputation
# against the number of SNPs left. In the criterion below, $14=info, $15=MAF.
#paste <(awk '{print (($14 >= 0.75) && ($15 >= 0.05)) || (($14 >= 0.55) && ($14 >= 0.3) && ($11 >= 0.99)); }' 
#    $n.stats.${suffix}) ${out}.dose.old > ${out}.dose
# Add SNP quality to dosage file. Take all SNPs with >=98% het concordance between our imputation and
# IMPUTE2, where there are at least 10 hets. This automatically filters MAF < 1.5%.
#
# MAF < 5% is recommended based on plots summarizing this validation but some validations show a lower
# MAF with high concordance may be OK as well. We use #hets >= 30 <==> MAF >~ 1%.
#paste <(awk '{ print (($10 >= 10) && ($11 >= 0.98)) }' $n.stats.${suffix}) ${out}.dose.old > ${out}.dose
#paste <(awk '{ print (($10 >= 100) && ($11 >= 0.98)) }' $n.stats.${suffix}) ${out}.dose.old > ${out}.dose
paste <(awk '{ print (($10 >= 30) && ($14 >= 0.9)) }' $n.stats.${suffix}) ${out}.dose.old > ${out}.dose
