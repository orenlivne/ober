#!/bin/bash
#-------------------------------------------------------------------------
# Convert the compressed imputed CGI files to PLINK PED.
# Zero out partial genotypes.
#-------------------------------------------------------------------------

#-----------------
# Input parameters
#-----------------
# Local imputed data output directory
out="$1" #"$OBER_OUT/impute_cgi/imputed-override"
start_chr="$2"
end_chr="$3"
num_jobs="$4" # #jobs to run in parallel
po="$5" # Output PO genotypes or not
if [ -z ${po} ]; then
    po=false;
else
    po=true;
fi

# All genotypes conversion
function do_chrom
{
  # Local imputed data output directory
  local out="$1"
  # Chromosome number
  local chrom="$2"

  cd ${out}
  echo "Chromosome ${chrom}"

  # Compressed imputed TSV -> PLINK TPED. Zero out partial genotypes.
  zcat ${out}/imputed_cgi.chr${chrom}.tsv.gz | awk -v chrom=${chrom} \
  '{ printf "%s %s 0 %s", chrom, $1, $4; \
     a["0"]=$6; a["1"]=$7; a["N"]="0"; \
     for (i = 9; i <= NF; i++) { \
       g1 = a[substr($i,2,1)]; \
       g2 = a[substr($i,3,1)]; \
       if ((g1 == "0") || (g2 == "0")) { g1 = "0"; g2 = "0"; } \
       printf " %s %s", g1, g2; \
     } \
     printf "\n"; \
   }' > ${out}/imputed_cgi.chr${chrom}.tped
  
  # PLINK TPED -> PLINK PED
  plink --noweb --nonfounders --tped imputed_cgi.chr${chrom}.tped --tfam hutterites.genotyped.tfam --make-bed --out imputed_cgi.chr${chrom}
}

# PO genotype conversion. Duplicate each allele to an individual i (hence each original individual
# is mapped to two individuals in the PLINK file: its paternal i1 and maternal i2 chromosomes).
# Example: if FINVID = 126251, the two individuals' PLINK IDs are 1262511, 1262512.
function do_chrom_po
{
  # Local imputed data output directory
  local out="$1"
  # Chromosome number
  local chrom="$2"

  cd ${out}
  echo "Chromosome ${chrom}"

  # Compressed imputed TSV -> PLINK TPED. Zero out partial genotypes and genotypes that are not
  # tagged as PO (tag=2: pedigree-based PO; tag=4: LD-based PO)
  if [ ! -f imputed_cgi.po.chr${chrom}.tped ]; then
      zcat imputed_cgi.chr${chrom}.tsv.gz | awk -v chrom=${chrom} \
  '{ printf "%s %s 0 %s", chrom, $1, $4; \
     a["0"]=$6; a["1"]=$7; a["N"]="0"; \
     for (i = 9; i <= NF; i++) { \
       tag = substr($i,1,1); \
       g1  = a[substr($i,2,1)]; \
       g2  = a[substr($i,3,1)]; \
       if (((tag != "2") && (tag != "4")) || (g1 == "0") || (g2 == "0")) { g1 = "0"; g2 = "0"; } \
       printf " %s %s %s %s", g1, g1, g2, g2; \
     } \
     printf "\n"; \
   }' > imputed_cgi.po.chr${chrom}.tped
  fi

  # PLINK TPED -> PLINK PED
  plink --noweb --nonfounders --tped imputed_cgi.po.chr${chrom}.tped --tfam hutterites.po.genotyped.tfam --make-bed --out imputed_cgi.po.chr${chrom}
}

#---------------------
# Main program
#---------------------
export -f do_chrom
export -f do_chrom_po

if $po; then
    # Duplicate individual in TFAM file
    tfam="${out}/hutterites.po.genotyped.tfam"
    cp ${OBER}/testdata/pedigree/hutterites.genotyped.tfam ${tfam}
    awk '{ printf "%s %s1 %s %s %s %s\n%s %s2 %s %s %s %s\n", $1, $2, $3, $4, $5, $6, $1, $2, $3, $4, $5, $6; };' hutterites.genotyped.tfam > ${tfam}

    seq ${start_chr} ${end_chr} | parallel -j ${num_jobs} do_chrom_po ${out}
else
    cp ${OBER}/testdata/pedigree/hutterites.genotyped.tfam ${out}/hutterites.genotyped.tfam
    seq ${start_chr} ${end_chr} | parallel -j ${num_jobs} do_chrom ${out}
fi
