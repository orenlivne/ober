#!/bin/bash
#-----------------------------------------------------------------
# A parallel version of count-genotypes that takes a file name,
# splits it into parts, runs count-genotypes on each part, and
# merges the results.
#
# Author: Oren E. Livne
# Date:   11-APRL2013
#-----------------------------------------------------------------
#=======================================
# Read input parameters
#=======================================
DARGS=65
PROGNAME=`basename $0`

function read_input_args
{
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Default argument values
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # #Digits in node directory names
    dir_prefix_size=""
    # #instances to run per node
    instances_per_node="1"
    # Name of file with list of sample indices
    sample_index=""
    # Output variant_id as the first column
    variant_id_opt=""

    # Read input arguments
    while getopts "hvin:" optionName; do
	case "$optionName" in
	    i) sample_index="$OPTARG";;
	    v) variant_id_opt="-v";;
	    n) instances_per_node="$OPTARG";;
	    h) print_usage; exit 0;;
	    [?]) print_type_for_help;;
	esac
    done
    
    # Get mandatory arguments
    shift $(( $OPTIND -1 ))
    if [[ $# -ne 4 ]]; then
	echo "4 mandatory args expected."
	print_type_for_help
    fi
    file="$1"
    out="$2"
    nodes="$3"
    job_name="$4"
}

function print_usage
{
    echo -e "Usage: ${PROGNAME} <file> <out> <nodes> <job_name>"
    echo -e ""
    echo -e "Run CGI genotype counting in parallel on Beagle. Reads from stdin. Writes to stdout."
    echo -e ""
    echo -e "Optional flags:"
    echo -e "\t-n instances_per_node\tSuffix length to use for part files. Default: ${instances_per_node}"
    echo -e "\t-i sample-index\tName of file with list of sample indices to use. If empty, uses all samples."
    echo -e "\t-v\t\tOutput variant_id as the first column."
}

# Print help message and die
function print_type_for_help
{
    echo "Type \"${PROGNAME} -h\" for help."
    exit $E_BADARGS
}

#=======================================
# Main Program
#=======================================
# Parse CLI arguments
read_input_args "$@"

# Must read a file and not stdin because split-nobreak/split-cgi calculates the total #lines
split-nobreak -a 4 -b 4 ${file} "${out}/node-" "" "${job_name}-" ".in" ${nodes} ${instances_per_node}
