#!/bin/bash
#----------------------------------------------------------------
# Split a CGI variant file into parts for a Beagle job run.
#
# Author: Oren E. Livne
# Date:   15-FEB-2013
#----------------------------------------------------------------

#=======================================
# Read input parameters
#=======================================
DARGS=65
PROGNAME=`basename $0`

function read_input_args
{
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Default argument values
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # #Digits in node directory names
    dir_prefix_size=""
    # #instances to run per node
    instances_per_node="1"
    # Generate index file?
    generate_index=false

    # Read input arguments
    while getopts "hin:" optionName; do
	case "$optionName" in
	    i) generate_index=true;;
	    n) instances_per_node="$OPTARG";;
	    h) print_usage; exit 0;;
	    [?]) print_type_for_help;;
	esac
    done
    
    # Get mandatory arguments
    shift $(( $OPTIND -1 ))
    if [[ $# -ne 4 ]]; then
		echo "4 mandatory args expected."
		print_type_for_help
    fi
    file=$1
    out=$2
    job_name=$3
    nodes=$4
}

function print_usage
{
    echo -e "Usage: ${PROGNAME} <file> <out> <job_name> <nodes>"
    echo -e ""
    echo -e "Split a CGI variant file into parts for a Beagle job run."
    echo -e ""
    echo -e "Optional flags:"
    echo -e "\t-n instances_per_node\tSuffix length to use for part files. Default: ${instances_per_node}"
    echo -e "\t-i\t\tGenerate an index file using the top row of the input file."
}

# Print help message and die
function print_type_for_help
{
    echo "Type \"${PROGNAME} -h\" for help."
    exit $E_BADARGS
}

function cat_file 
{
    file="$1"
    if [[ -n `echo "${file}" | sed -n '/\(.*\)\.gz/p'` ]]; then
	zcat $file
    else
	cat $file
    fi
}

#=======================================
# Main Program
#=======================================
# Parse CLI arguments
read_input_args "$@"

# Split data to parts
temp=/tmp/$$.tmp
cat_file $file | sed '1d' > $temp
split-nobreak -a 4 -b 4 $temp "${out}/node-" "" "${job_name}-" ".in" ${nodes} ${instances_per_node}
rm -f $temp

# Extract CGI header containing the sample IDs into an index file
if $generate_index; then
    cat_file $file | head -1 > $out/${job_name}.index
fi

