#!/bin/bash
#-----------------------------------------------------------------
# Count genotypes in a CGI/imputed genotype file.
#
# Author: Oren E. Livne
# Date:   10-APR-2013
#--------------------------------------------------------------------
#=======================================
# Read input parameters
#=======================================
# Constants
DARGS=65
PROGNAME=`basename $0`
offset="9"     # Column number of first genotype

function read_input_args
{
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Default argument values
    #%%%%%%%%%%%%%%%%%%%%%%%%
    # Output variant_id as the first column
    print_variant_id=false
    # Name of file with list of sample indices
    sample_index=""
    # Number of header lines to skip
    num_header_lines=0
    # Haplotype type filter
    hap_type_low=-1
    hap_type_high=-1
    # Input data type (genotype/haplotype)
    data_type="genotype"
    # Sample count output file
    sample_out="sample.out"
	
    # Read input arguments
    while getopts "hvi:n:t:e:g:s:" optionName; do
	case "$optionName" in
	    v) print_variant_id=true;;
	    i) sample_index="$OPTARG";;
	    n) num_header_lines="$OPTARG";;
	    t) hap_type_low="$OPTARG";;
	    e) hap_type_high="$OPTARG";;
	    g) data_type="$OPTARG";;
	    s) sample_out="$OPTARG";;
	    h) print_usage; exit 0;;
	    [?]) print_type_for_help;;
       esac
    done

    # Get mandatory arguments
    shift $(( $OPTIND -1 ))
    if [[ $# -ne 1 ]]; then
  	echo "Input file should be specified."
	print_type_for_help
    fi
    input_file="$1"
}

function print_usage
{
    echo -e "Usage: ${PROGNAME} [flags] <file>"
    echo -e ""
    echo -e "Count genotypes in a CGI/imputed genotype file."
    echo -e ""
    echo -e "Optional flags:"
    echo -e "\t-v\t\tOutput variant_id as the first column."
    echo -e "\t-i sample-index\tName of file with list of sample indices to use. If empty, uses all samples."
    echo -e "\t-n num-header-lines\tSkip the first num_header_lines lines."
    echo -e "\t-t hap_type_low\tIf specified, counts only genotypes whose hap_type tag value >= hap_type_low."
    echo -e "\t-e hap_type_high\tIf specified, counts only genotypes whose hap_type tag value <= hap_type_high."
    echo -e "\t\t\t\tValues are 1 (phased haps), 2 (phased with known paternal origin), 3 (LD-based imputed genotype)."
    echo -e "\t-g data-type\tInput data type (genotype|haplotype). Default: ${data_type}"
    echo -e "\t-s sample-out\tSample count output file. Default: ${sample_out}"
}

# Print help message and die
function print_type_for_help
{
    echo "Type \"${PROGNAME} -h\" for help."
    exit $E_BADARGS
}

#=======================================
# Genotype Counting
#=======================================
# Count genotypes in a single input line. Accepts the input line. Relies on global variables
# set in the main program below.
function count_genotypes
{
    echo "$1" | cut -f ${sample_columns} | ${OBER_CODE}/impute/impute/cgi/count_cgi_genotypes.py ${count_flags}
}

#=======================================
# Main Program
#=======================================
# Parse CLI arguments
read_input_args "$@"

# Filter to a subset of samples, if sample_index is specified
if [ -n "${sample_index}" ]; then
    sample_columns="1,5,`cat ${sample_index} | awk "{ print \\\$1+${offset[$cnt]} }" | paste -sd,`"
else
    sample_columns="1,5,$(( ${offset[$cnt]} ))-1000000"
fi

count_exec=`to-unix-path "${OBER_CODE}/impute/impute/cgi/count_cgi_genotypes.py"`
count_exec="${count_exec} -s ${sample_out}"
if $print_variant_id; then
    count_exec="${count_exec} -v"
fi
if [[ $num_header_lines -gt 0 ]]; then
    count_exec="${count_exec} -n ${num_header_lines}"
fi
if [[ ${hap_type_low} -gt 0 ]]; then
    count_exec="${count_exec} -t ${hap_type_low}"
fi
if [[ ${hap_type_high} -gt 0 ]]; then
    count_exec="${count_exec} -e ${hap_type_high}"
fi
count_exec="${count_exec} -g ${data_type}"

if [[ -n `echo "${input_file}" | sed -n '/\(.*\)\.gz/p'` ]]; then
   zcat ${input_file} | cut -f ${sample_columns} | ${count_exec}
else
   cut -f ${sample_columns} ${input_file} | ${count_exec}
fi