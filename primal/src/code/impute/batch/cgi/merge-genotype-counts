#!/bin/bash
#--------------------------------------------------------------------
# Create genomic (global) count files from chromosomal genotype
# count results.
#
# Author: Oren E. Livne
# Date:   15-APR-2013
#--------------------------------------------------------------------
# Constants
variant_types="all snp ins del sub"

# Input parameters
out_dir="$1" #"$OBER_OUT/impute_cgi/count"
genotype_thresholds="$2"
phasing_thresholds="$3"
start_chr="$4"
stop_chr="$5"

function print_call_rate
{
    title="$1"
    col="$2"
    v="$3"
    report_file="$4"
    printf "%-22s" "$title" >> ${report_file}
    for t in ${genotype_thresholds}; do
	printf " %-10.5f" `awk -v c=$col 'BEGIN {s=0.0} {s += $c}; END {print s/NR}' count-$t-$v.txt` >> ${report_file}
	for p in ${phasing_thresholds}; do
	    printf " %-10.5f" `awk -v c=$col 'BEGIN {s=0.0} {s += $c}; END {print s/NR}' count-$t-$p-$v.txt` >> ${report_file}
	done
    done
    printf "\n" >> ${report_file}
}

# Merge to global (genomic) count files, one for each variant type
mkdir -p ${out_dir}/total
cd ${out_dir}/total
rm -f count*.txt

for v in ${variant_types}; do
    for chrom in `seq ${start_chr} ${stop_chr}`; do
	chr_dir="${out_dir}/chr${chrom}"
	cat ${chr_dir}/count-all-$v.txt >> count-all-$v.txt
	for t in ${genotype_thresholds}; do
	    cat ${chr_dir}/count-$t-$v.txt >> count-$t-$v.txt
	    for p in ${phasing_thresholds}; do
		cat ${chr_dir}/count-$t-$p-$v.txt >> count-$t-$p-$v.txt
	    done
	done
    done

    # Prepare genotype filtering count report
    report_file="count-report-$v.txt"

    # Header line
#    printf "%-22s" "Chrom" >> ${report_file}
    printf "%-22s" "Measure" >> ${report_file}
    for t in ${genotype_thresholds}; do
	printf " %-10s" "$t" >> ${report_file}
	for p in ${phasing_thresholds}; do
	    printf " %-10s" "$t-$p" >> ${report_file}
	done
    done
    printf "\n" >> ${report_file}
    
    # Chromosome lines
    tmp_count="${report_file}.tmp"
    rm -f ${tmp_count}
    for chrom in `seq ${start_chr} ${stop_chr}`; do
	chr_dir="${out_dir}/chr${chrom}"
	printf "%-22d" "${chrom}" >> ${tmp_count}
	for t in ${genotype_thresholds}; do
	    printf " %-10d" `awk '{print $1}' ${chr_dir}/count-$t-$v.txt` >> ${tmp_count}
	    for p in ${phasing_thresholds}; do
		printf " %-10d" `awk '{print $1}' ${chr_dir}/count-$t-$p-$v.txt` >> ${tmp_count}
	    done
	done
	printf "\n" >> ${tmp_count}
    done

    # Totals line
    stop=`head -1 ${tmp_count} | awk '{print NF}'`
    cat ${tmp_count} | \
	awk -v start=2 -v stop=$stop '\
BEGIN { \
   for (i = start; i <= stop; i++) count[i] = 0; \
} \
{ \
    for (i = start; i <= stop; i++) { count[i] += $i; } \
} \
END { \
   printf "%-22s", "Total"
   for (i = start; i <= stop; i++) { printf " %-10d", count[i]; } \
   printf "\n";
}' >> ${report_file}
    rm -f ${tmp_count}

    # Average call rates for each case
    print_call_rate "WGS Genotype Call Rate" "12" $v ${report_file}
    print_call_rate "WGS Phasing Rate" "23" $v ${report_file}
    print_call_rate "Allele Call Rate" "33" $v ${report_file}
    print_call_rate "Genotype Call Rate" "34" $v ${report_file}
    print_call_rate "POO Allele Call Rate" "44" $v ${report_file}
    print_call_rate "POO Call Rate" "45" $v ${report_file}
    print_call_rate "LD Call Rate" "56" $v ${report_file}
    print_call_rate "POO Allele Call Rate" "66" $v ${report_file}

    # Convert LD call rates to fractions called within the missing genotypes after pedigree imputation
    #awk '{if ($1 == "Genotype") { for (i=4; i<= NF; i++) a[i] = $i; } if ($1 == "LD") { printf "%-22s", "LD Call Rate"; for (i=4; i<= NF; i++) printf " %-10.5f", $i/(1-a[i]+$i); printf "\n"; } else print $0; }' ${report_file} > tmp && mv tmp ${report_file}
done

# Merge sample data
paste <(awk '{print $2}' ${OBER_OUT}/impute_cgi/imputed-override/hutterites.imputed.tfam) <(paste `find ${out_dir} -name 'imputed-sample.txt'` | awk '{ called=0; all=0; for (i = 0; i < NF; i += 9) { a = $(i+5)+$(i+6)+$(i+8)+$(i+9); b = $(i+1)+$(i+2)+$(i+3)+$(i+4)+$(i+7); called += a; all += (a+b); } print called, (1.0*called)/all; }') > ${out_dir}/total/sample.txt

# Prepare variant annotation files for all imputed variants.
# (Prepare files with all CGI variants and with the final list of imputed variants,
# using the criterion (call rate >= 0.98) -- now replaced by an annotation database.
cd ${out_dir}
if [ ! -f ${out_dir}/count.txt ]; then
    cat `( for c in \`seq ${start_chr} ${stop_chr}\`; do echo chr$c/count.txt; done ) | paste -sd' '` > ${out_dir}/count.txt
#    awk '$13 >= .98' count.txt > ${out_dir}/count-0.98.txt
fi
if [ ! -f ${out_dir}/annotations.txt ]; then
    ( for c in `seq ${start_chr} ${stop_chr}`; do zcat ${OBER_OUT}/impute_cgi/genotypes/genotypes.chr$c.tsv.gz | sed '1d'; done ) | awk '{ for (i=1; i<=8; i++) { printf "%s ", $i; } printf "\n"; }' > ${out_dir}/annotations.txt
#    join --check-order -j 1 <(awk '{print $1}' count-0.98.txt | sort) <(sort -k 1,1 annotations.txt) > ${out_dir}/annotations-0.98.txt
fi
