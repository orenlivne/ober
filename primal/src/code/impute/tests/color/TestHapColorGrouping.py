'''
============================================================
Test haplotype coloring - older Group algorithm. 

Created on January 11, 2012
@author: Oren Livne <livne@uchicago.edu>
============================================================
'''
import unittest, numpy as np, impute as im
from numpy.ma.testutils import assert_equal

class TestHapColorGrouping(unittest.TestCase):
    #---------------------------------------------
    # Constants
    #---------------------------------------------
    
    #---------------------------------------------
    # Setup Methods
    #---------------------------------------------
    def setUp(self):
        pass
    
    #---------------------------------------------
    # Test Methods
    #---------------------------------------------
    def test_grouping(self):
        '''Check segment group functions.'''
        s = im.segment.segment_data_to_segment_set(family_segments())
        d2 = im.segment.to_dict(s)
        assert_equal(s.length, 17, 'Wrong segment set size')
        s.group_to_disjoint()
        assert_equal(s.length, 75, 'Wrong segment set size')
        d = s.to_group_by_snp_range()
        assert_equal(d.length, 19, 'Wrong segment set size')
        assert_equal(d, d2, 'Mutative and Non-mutative transformations should yield the same result')

    def test_coloring(self):
        '''Check segment coloring functions.'''
        s = im.segment.segment_data_to_segment_set(family_segments())
        sub_segments, groups = im.color.hap_color_grouping.to_group_to_color(s, segment_gap=0)
        assert_equal(len(sub_segments), 19, 'Wrong # disjoint sub-segments')
        assert_equal(len(groups), 31, 'Wrong # distinct haplotype colors')
        assert_equal([len(x) for x in groups if len(x) > 1], np.array([76, 53, 65, 45]),
                     'Wrong large color group sizes')
        assert_equal(sub_segments, [(0, 1), (1, 2), (2, 4), (4, 301), (301, 334), (334, 576), (576, 600), (600, 795), (795, 805), (805, 1411), (1411, 1413), (1413, 1978), (1978, 2019), (2019, 2551), (2551, 2569), (2569, 2650), (2650, 2657), (2657, 3215), (3215, 3218)],
                     'Wrong sub-segments')
        assert_equal(groups, [[(14, (3, 1)), (11, (6, 1)), (3, (5, 1)), (5, (6, 1)), (8, (6, 1)), (17, (5, 1)), (9, (3, 1)), (7, (4, 1)), (3, (1, 0)), (9, (5, 1)), (0, (1, 0)), (12, (1, 0)), (8, (3, 1)), (11, (4, 1)), (9, (6, 1)), (5, (5, 1)), (17, (2, 1)), (8, (5, 1)), (2, (4, 1)), (15, (5, 1)), (1, (1, 0)), (13, (1, 0)), (18, (1, 0)), (16, (5, 1)), (14, (1, 0)), (4, (5, 1)), (10, (1, 0)), (15, (1, 0)), (14, (5, 1)), (18, (2, 1)), (10, (5, 1)), (3, (4, 1)), (11, (5, 1)), (18, (6, 1)), (7, (5, 1)), (11, (1, 0)), (16, (1, 0)), (12, (6, 1)), (6, (1, 0)), (18, (3, 1)), (8, (1, 0)), (13, (3, 1)), (4, (4, 1)), (1, (5, 1)), (7, (1, 0)), (13, (5, 1)), (4, (1, 0)), (6, (5, 1)), (12, (3, 1)), (8, (4, 1)), (17, (1, 0)), (7, (3, 1)), (5, (4, 1)), (13, (6, 1)), (9, (1, 0)), (6, (6, 1)), (16, (6, 1)), (10, (6, 1)), (0, (5, 1)), (17, (3, 1)), (12, (5, 1)), (9, (4, 1)), (15, (3, 1)), (5, (1, 0)), (7, (6, 1)), (2, (1, 0)), (16, (3, 1)), (14, (6, 1)), (10, (3, 1)), (11, (3, 1)), (18, (5, 1)), (17, (6, 1)), (6, (4, 1)), (15, (6, 1)), (2, (5, 1)), (10, (4, 1))], [(6, (5, 0)), (3, (6, 0)), (15, (0, 0)), (9, (0, 0)), (4, (2, 0)), (15, (4, 0)), (16, (5, 0)), (2, (0, 0)), (9, (2, 0)), (7, (2, 0)), (5, (5, 0)), (5, (0, 0)), (13, (5, 0)), (0, (5, 0)), (8, (0, 0)), (18, (0, 0)), (7, (6, 0)), (9, (5, 0)), (11, (0, 0)), (17, (5, 0)), (4, (0, 0)), (8, (5, 0)), (8, (2, 0)), (6, (2, 0)), (3, (2, 0)), (5, (6, 0)), (7, (0, 0)), (1, (0, 0)), (1, (5, 0)), (6, (6, 0)), (3, (5, 0)), (15, (5, 0)), (11, (5, 0)), (17, (4, 0)), (14, (0, 0)), (17, (0, 0)), (0, (0, 0)), (10, (5, 0)), (10, (0, 0)), (7, (5, 0)), (18, (5, 0)), (3, (0, 0)), (16, (4, 0)), (13, (0, 0)), (5, (2, 0)), (16, (0, 0)), (6, (0, 0)), (2, (5, 0)), (4, (5, 0)), (4, (6, 0)), (12, (5, 0)), (12, (0, 0)), (14, (5, 0))], [(10, (4, 0)), (9, (0, 1)), (8, (0, 1)), (7, (0, 1)), (4, (3, 0)), (2, (3, 0)), (17, (0, 1)), (17, (3, 0)), (2, (0, 1)), (12, (4, 0)), (5, (4, 0)), (12, (2, 0)), (9, (6, 0)), (13, (3, 0)), (10, (0, 1)), (18, (3, 0)), (4, (4, 0)), (17, (6, 0)), (17, (2, 0)), (5, (3, 0)), (10, (3, 0)), (14, (2, 0)), (3, (0, 1)), (11, (4, 0)), (13, (4, 0)), (11, (0, 1)), (3, (4, 0)), (8, (3, 0)), (14, (0, 1)), (11, (6, 0)), (16, (6, 0)), (9, (3, 0)), (15, (6, 0)), (4, (0, 1)), (16, (2, 0)), (11, (2, 0)), (13, (6, 0)), (12, (0, 1)), (10, (6, 0)), (15, (0, 1)), (14, (6, 0)), (7, (4, 0)), (5, (0, 1)), (9, (4, 0)), (0, (3, 0)), (13, (0, 1)), (6, (3, 0)), (0, (0, 1)), (18, (0, 1)), (11, (3, 0)), (16, (3, 0)), (6, (4, 0)), (6, (0, 1)), (8, (4, 0)), (3, (3, 0)), (13, (2, 0)), (1, (3, 0)), (16, (0, 1)), (12, (6, 0)), (15, (3, 0)), (1, (0, 1)), (12, (3, 0)), (7, (3, 0)), (14, (3, 0)), (15, (2, 0))], [(6, (1, 1)), (2, (3, 1)), (11, (1, 1)), (11, (2, 1)), (10, (1, 1)), (2, (6, 1)), (5, (1, 1)), (3, (2, 1)), (6, (2, 1)), (8, (2, 1)), (17, (4, 1)), (3, (3, 1)), (9, (1, 1)), (15, (1, 1)), (18, (4, 1)), (14, (2, 1)), (1, (3, 1)), (14, (1, 1)), (4, (1, 1)), (7, (2, 1)), (9, (2, 1)), (12, (2, 1)), (14, (4, 1)), (16, (1, 1)), (3, (6, 1)), (4, (2, 1)), (15, (4, 1)), (18, (1, 1)), (8, (1, 1)), (13, (1, 1)), (3, (1, 1)), (15, (2, 1)), (2, (2, 1)), (2, (1, 1)), (5, (3, 1)), (13, (2, 1)), (17, (1, 1)), (16, (4, 1)), (5, (2, 1)), (13, (4, 1)), (10, (2, 1)), (12, (1, 1)), (1, (1, 1)), (7, (1, 1)), (4, (3, 1))], [(18, (6, 0))], [(1, (6, 0))], [(1, (4, 1))], [(16, (2, 1))], [(0, (1, 1))], [(14, (4, 0))], [(1, (2, 1))], [(1, (2, 0))], [(0, (6, 1))], [(0, (2, 1))], [(18, (4, 0))], [(8, (6, 0))], [(2, (4, 0))], [(0, (2, 0))], [(0, (3, 1))], [(1, (6, 1))], [(12, (4, 1))], [(1, (4, 0))], [(4, (6, 1))], [(10, (2, 0))], [(6, (3, 1))], [(18, (2, 0))], [(2, (6, 0))], [(0, (6, 0))], [(0, (4, 0))], [(2, (2, 0))], [(0, (4, 1))]],
                     'Wrong color groups')

    def test_coloring_of_overlap(self):
        '''Check segment coloring functions when segments slightly overlap.'''
        s = im.segment.segment_data_to_segment_set(overlapping_segments())
        sub_segments, groups = im.color.hap_color_grouping.to_group_to_color(s, segment_gap=25)
        assert_equal(len(sub_segments), 19, 'Wrong # disjoint sub-segments')
        assert_equal(len(groups), 30, 'Wrong # distinct haplotype colors')
        assert_equal([len(x) for x in groups if len(x) > 1], np.array([76, 54, 66, 45]),
                     'Wrong large color group sizes')

#---------------------------------------------
# Private Methods
#---------------------------------------------
def family_segments():
    '''Segment set test case. Taken from nuclear family phasing; cf. TestIbdDistantFamily.'''
    return [((4   , 1411), (17087656, 32965049, 15.877, 0), ((2, 0), (0, 0))),
            ((1413, 3215), (33013062, 51089213, 18.076, 1), ((0, 1), (2, 0))),
            ((0   , 3218), (16484792, 51156933, 34.672, 1), ((0, 1), (3, 0))),
            ((4   , 2551), (17087656, 44974493, 27.887, 1), ((0, 1), (4, 0))),
            ((2569, 3215), (45198494, 51089213, 5.891, 0), ((0, 0), (4, 0))),
            ((0   , 3218), (16484792, 51156933, 34.672, 1), ((0, 0), (5, 0))),
            ((4   , 795), (17087656, 27006698, 9.919, 0), ((0, 0), (6, 0))),
            ((805 , 3215), (27119061, 51089213, 23.970, 1), ((0, 1), (6, 0))),
            ((2   , 2650), (17075353, 45881315, 28.806, 0), ((1, 1), (2, 1))),
            ((2657, 3218), (45940934, 51156933, 5.216, 2), ((1, 0), (2, 1))),
            ((1   , 576), (17065079, 25228089, 8.163, 0), ((3, 1), (1, 1))),
            ((600 , 3218), (25444874, 51156933, 25.712, 2), ((1, 0), (3, 1))),
            ((2   , 1978), (17075353, 37206341, 20.131, 2), ((1, 0), (4, 1))),
            ((2019, 3218), (37509844, 51156933, 13.647, 0), ((4, 1), (1, 1))),
            ((0   , 3218), (16484792, 51156933, 34.672, 3), ((5, 1), (1, 0))),
            ((2   , 301), (17075353, 20993519, 3.918, 0), ((6, 1), (1, 1))),
            ((334 , 3218), (21363960, 51156933, 29.793, 2), ((1, 0), (6, 1)))]

def overlapping_segments():
    '''The same as family_segments(), but tweaked so that two large segments are slightly overlapping.'''
    data = family_segments()
    data[0] = ((4   , 1420), (17087656, 32965049, 15.877, 0), ((2, 0), (0, 0)))
    return data
